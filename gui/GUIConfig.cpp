// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "GUIConfig.h"
#include <FL/Fl.H>
#include <FL/fl_ask.H>
#include <FL/Fl_Shared_Image.H>
#include <FL/Fl_PNG_Image.H>
#include "GUITabboz.h"
#include "../zarrosim.h"
#include "../global.h"
#include "../eventi.h"
#include "../sound.h"
#include "../sharedimg.h"
const char *tema_corr; 
int diff_nuova; 

Fl_Double_Window *win_config=(Fl_Double_Window *)0;

static void cb_I(Fl_Round_Button*, void*) {
  diff_nuova=1;
}

static void cb_Hey(Fl_Round_Button*, void*) {
  diff_nuova=2;
}

static void cb_Hurt(Fl_Round_Button*, void*) {
  diff_nuova=3;
}

static void cb_Ultra(Fl_Round_Button*, void*) {
  diff_nuova=4;
}

static void cb_Nightmare(Fl_Round_Button*, void*) {
  diff_nuova=5;
}

static void cb_Windows(Fl_Menu_*, void*) {
  Fl::scheme("base");
}

static void cb_GTK(Fl_Menu_*, void*) {
  Fl::scheme("gtk+");
}

static void cb_Plastic(Fl_Menu_*, void*) {
  Fl::scheme("plastic");
}

static void cb_Gleam(Fl_Menu_*, void*) {
  Fl::scheme("gleam");
}

Fl_Menu_Item menu_Tema[] = {
 {"Windows 9x", 0,  (Fl_Callback*)cb_Windows, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"GTK", 0,  (Fl_Callback*)cb_GTK, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Plastic (OSX)", 0,  (Fl_Callback*)cb_Plastic, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Gleam", 0,  (Fl_Callback*)cb_Gleam, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Check_Button *cfg_euro=(Fl_Check_Button *)0;

Fl_Check_Button *cfg_timer=(Fl_Check_Button *)0;

Fl_Check_Button *cfg_suono=(Fl_Check_Button *)0;

Fl_Check_Button *cfg_log=(Fl_Check_Button *)0;

static void cb_OK(Fl_Button*, void*) {
  difficolta=diff_nuova;
ApplicaDifficolta();

//Copiando direttamente in tema_corr segfaulta
if (Fl::is_scheme("gtk+"))
  strcpy(tema_grafico,"gtk+");
else if (Fl::is_scheme("plastic"))
  strcpy(tema_grafico,"plastic");
else if (Fl::is_scheme("gleam"))
  strcpy(tema_grafico,"gleam");
else
  strcpy(tema_grafico,"none");

euro = cfg_euro->value();
sound_active = cfg_suono->value();

win_principale->activate();
AggiornaPrincipale();
win_config->hide();
}

static void cb_Annulla(Fl_Button*, void*) {
  if(tema_corr)
  Fl::scheme(tema_corr);
else
  Fl::scheme("none");
win_principale->activate();
AggiornaPrincipale();
win_config->hide();
}

static void cb_Info(Fl_Button*, void*) {
  GUIAbout();
win_about->show();
}

Fl_Double_Window* GUIConfig() {
  { win_config = new Fl_Double_Window(505, 215, "Configurazione");
    win_config->hotspot(win_config);
    { Fl_Group* o = new Fl_Group(10, 25, 240, 145, "Difficolt\303\240");
      o->tooltip("Difficolt\303\240 inferiori riducono la probabilit\303\240\n di essere lascia\
to/licenziato e la\nfrequenza degli eventi casuali");
      o->box(FL_EMBOSSED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Round_Button* o = new Fl_Round_Button(15, 30, 230, 25, "I\'m too young to be a tabbozzo.");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_I);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(15, 57, 230, 25, "Hey, not too rough.");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Hey);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(15, 85, 230, 25, "Hurt me plenty.");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Hurt);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(15, 112, 230, 25, "Ultra-violence.");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Ultra);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(15, 140, 230, 25, "Nightmare! (like real life...)");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Nightmare);
      } // Fl_Round_Button* o
      Fl_Round_Button *btn = (Fl_Round_Button *) o->child(difficolta-1);
      btn->set();
      diff_nuova = difficolta;
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(255, 25, 240, 145, "Opzioni");
      o->box(FL_EMBOSSED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Choice* o = new Fl_Choice(350, 30, 135, 25, "Tema grafico");
        o->tooltip("Stile delle finestre/pulsanti");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_Tema);
        if (Fl::is_scheme("none")) o->value(0);
        if (Fl::is_scheme("gtk+")) o->value(1);
        if (Fl::is_scheme("plastic")) o->value(2);
        if (Fl::is_scheme("gleam")) o->value(3);
      } // Fl_Choice* o
      { Fl_Check_Button* o = cfg_euro = new Fl_Check_Button(265, 65, 220, 25, "Importi in Euro");
        cfg_euro->tooltip("Converte tutti gli importi in Euro");
        cfg_euro->down_box(FL_DOWN_BOX);
        o->value(euro);
      } // Fl_Check_Button* cfg_euro
      { Fl_Check_Button* o = cfg_timer = new Fl_Check_Button(265, 90, 220, 25, "Timer");
        cfg_timer->tooltip("NON IMPLEMENTATO\nSe attivato, i giorni avanzano automaticamente\n anche se l\
\'utente non effettua azioni");
        cfg_timer->down_box(FL_DOWN_BOX);
        cfg_timer->deactivate();
        o->value(timer_active);
      } // Fl_Check_Button* cfg_timer
      { Fl_Check_Button* o = cfg_suono = new Fl_Check_Button(265, 115, 220, 25, "Effetti sonori");
        cfg_suono->tooltip("Abilita effetti sonori (solo per Windows)");
        cfg_suono->down_box(FL_DOWN_BOX);
        o->value(sound_active);
      } // Fl_Check_Button* cfg_suono
      { cfg_log = new Fl_Check_Button(265, 140, 220, 25, "File di log (zarrosim.log)");
        cfg_log->tooltip("Scrive gli eventi principali in un file di log\nnel profilo dell\'utente");
        cfg_log->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* cfg_log
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(345, 180, 70, 25, "OK");
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(425, 180, 70, 25, "Annulla");
      o->callback((Fl_Callback*)cb_Annulla);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(10, 180, 70, 25, "Info...");
      o->callback((Fl_Callback*)cb_Info);
    } // Fl_Button* o
    tema_corr = Fl::scheme();
    win_config->set_modal();
    win_config->size_range(505, 215, 505, 215);
    win_config->end();
  } // Fl_Double_Window* win_config
  return win_config;
}

Fl_Double_Window *win_about=(Fl_Double_Window *)0;

static void cb_OK1(Fl_Button*, void*) {
  win_about->hide();
}

static void cb_Norme(Fl_Button* o, void*) {
  fl_message_title("Norme di utilizzo");
fl_message("Il biglietto è valido solo dopo la convalida.\nIl biglietto deve essere conservato per tutta la durata del viaggio.\nIl diritto a viaggiare cessa al termine della tratta corrispondente al valore del biglietto.\nIl passeggero che al controllo non fosse in grado di presentare il biglietto o lo presentasse irriconoscibile,\no comunque non valido, verrà abbattuto.\nLa notifica del decesso verrà inviata ai parenti solo previo pagamento delle spese postali.");
}

Fl_Double_Window* GUIAbout() {
  { win_about = new Fl_Double_Window(405, 160, "A proposito di Tabboz Simulator NG");
    win_about->hotspot(win_about);
    { Fl_Box* o = new Fl_Box(5, 3, 395, 122, "Tabboz Simulator Next Generation\n\nCopyright (C) 2022 by Walter Agazzi ( git\
hub.com/tag2015 )\nBasato sul progetto originale copyright 1997-2000 by Andrea\
 Bonomi, Emanuele Caccialanza, Daniele Gazzarri.");
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(330, 130, 70, 25, "OK");
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(5, 140, 95, 15, "Norme di utilizzo");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Norme);
    } // Fl_Button* o
    win_about->set_modal();
    win_about->size_range(505, 215, 505, 215);
    win_about->end();
  } // Fl_Double_Window* win_about
  return win_about;
}
